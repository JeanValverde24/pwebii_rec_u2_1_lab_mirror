name: CI Pipeline

on:
  workflow_dispatch: {}
  pull_request: {}
  push:
    branches:
      - main
      - master
    paths:
      - .github/workflows/ci.yml
  schedule:
    # Ejecuta diariamente a las 17:58 UTC
    - cron: '58 17 * * *'

jobs:
  semgrep:
    name: Semgrep Analysis
    runs-on: ubuntu-20.04
    env:
      SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}
    container:
      image: returntocorp/semgrep
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Run Semgrep Scan
        run: semgrep ci

  sonarcloud-analysis:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Permite anÃ¡lisis completo

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin' # Requerido para evitar errores
          java-version: '11'

      - name: SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@v1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: "https://sonarcloud.io"
        with:
          args: >
            -Dsonar.organization=jeanvalverde24
            -Dsonar.projectKey=pwebii_rec_u2_1_lab_mirror
            -Dsonar.sources=.

      - name: Fetch SonarCloud Metrics and Display
        id: fetch-metrics
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          set -e
          SONAR_API_URL="https://sonarcloud.io/api/measures/component"
          PROJECT_KEY="pwebii_rec_u2_1_lab_mirror"
          METRICS="bugs,vulnerabilities,code_smells,coverage,duplicated_lines_density,complexity,ncloc,cognitive_complexity,comment_lines_density,security_rating,reliability_rating,sqale_rating"
          
          echo "Fetching SonarCloud Metrics..."
          RESPONSE=$(curl -s -u "$SONAR_TOKEN:" "$SONAR_API_URL?component=$PROJECT_KEY&metricKeys=$METRICS")
          
          if [[ -z "$RESPONSE" || "$RESPONSE" == *"errors"* ]]; then
            echo "Error fetching SonarCloud metrics. Please check the project key and SonarCloud API token."
            exit 1
          fi

          echo "SonarCloud API Response: $RESPONSE"
          echo "response=$RESPONSE" >> $GITHUB_ENV

      - name: Publish SonarCloud Metrics as Annotations
        run: |
          echo "## SonarCloud Metrics" >> $GITHUB_STEP_SUMMARY
          echo "| Metric               | Value   | Icon       |" >> $GITHUB_STEP_SUMMARY
          echo "|----------------------|---------|------------|" >> $GITHUB_STEP_SUMMARY
          echo $RESPONSE | jq -r '.component.measures[] | 
          if .metric == "coverage" then "| Coverage             | \(.value)% | :white_check_mark: |" 
          elif .metric == "complexity" then "| Complexity           | \(.value) | :triangular_ruler: |" 
          elif .metric == "ncloc" then "| Lines of Code        | \(.value) | :scroll: |" 
          elif .metric == "security_rating" then "| Security Rating      | \(.value) | :shield: |" 
          elif .metric == "reliability_rating" then "| Reliability Rating   | \(.value) | :tools: |" 
          elif .metric == "sqale_rating" then "| Maintainability      | \(.value) | :recycle: |" 
          elif .metric == "code_smells" then "| Code Smells          | \(.value) | :nose: |" 
          elif .metric == "duplicated_lines_density" then "| Duplications         | \(.value)% | :twisted_rightwards_arrows: |" 
          elif .metric == "cognitive_complexity" then "| Cognitive Complexity | \(.value) | :brain: |" 
          elif .metric == "bugs" then "| Bugs                 | \(.value) | :bug: |" 
          elif .metric == "comment_lines_density" then "| Comment Density      | \(.value)% | :speech_balloon: |" 
          else empty end' >> $GITHUB_STEP_SUMMARY
        env:
          RESPONSE: ${{ env.response }}
