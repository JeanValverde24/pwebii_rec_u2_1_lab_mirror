name: SonarCloud & Code Coverage Analysis

on:
  push:
    branches:
      - main
      - master

jobs:
  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore
        working-directory: src

      - name: Build project
        run: dotnet build --no-restore
        working-directory: src

      - name: Run tests and collect coverage
        run: |
          dotnet test --no-build --collect:"XPlat Code Coverage" --settings coverlet.runsettings --logger trx
        working-directory: src

      - name: Install ReportGenerator
        run: dotnet tool install --global dotnet-reportgenerator-globaltool

      - name: Verify ReportGenerator Installation
        run: |
          ~/.dotnet/tools/reportgenerator --help || echo "ReportGenerator is installed"

      - name: Convert coverage to Markdown
        run: |
          ~/.dotnet/tools/reportgenerator -reports:src/**/TestResults/**/coverage.cobertura.xml -targetdir:coverage -reporttypes:MarkdownSummary

      - name: Extract coverage percentage
        id: coverage
        run: |
          COVERAGE=$(grep -oP '(?<=Total Coverage: )\d+\.\d+' coverage/Summary.md)
          echo "COVERAGE=$COVERAGE" >> $GITHUB_ENV

      - name: Update README.md with coverage
        run: |
          sed -i '/## ðŸ“Š Code Coverage Report/,$d' README.md
          echo "## ðŸ“Š Code Coverage Report" >> README.md
          echo "" >> README.md
          cat coverage/Summary.md >> README.md

      - name: Commit and push coverage results
        env:
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git remote set-url origin https://x-access-token:${PAT_TOKEN}@github.com/YOUR_USERNAME/YOUR_REPOSITORY.git
          git add README.md
          git commit -m "ðŸ“ˆ Update Code Coverage report in README.md" || echo "No changes to commit"
          git push origin HEAD:main || echo "No changes to push"

      - name: Add annotation for code coverage
        if: success()
        run: |
          echo "::notice title=Code Coverage Report::Coverage: ${{ env.COVERAGE }}%"

  sonar:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest
    needs: coverage

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.0.x'

      - name: Restore dependencies
        run: dotnet restore
        working-directory: src

      - name: Build project
        run: dotnet build --no-restore
        working-directory: src

      - name: Prepare SonarCloud Analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          dotnet tool install --global dotnet-sonarscanner
          dotnet sonarscanner begin /k:"YOUR_PROJECT_KEY" /o:"YOUR_ORG_KEY" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
        working-directory: src

      - name: Run SonarCloud Analysis
        run: |
          dotnet build
          dotnet sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
        working-directory: src

      - name: Fetch SonarCloud Metrics
        run: |
          echo "## ðŸ“Š SonarCloud Metrics" > sonar_metrics.md
          echo "" >> sonar_metrics.md
          echo "| Metric | Value |" >> sonar_metrics.md
          echo "|--------|-------|" >> sonar_metrics.md
          echo "| Security Hotspots | $(curl -s https://sonarcloud.io/api/measures/component?component=YOUR_PROJECT_KEY&metricKeys=security_hotspots | jq '.component.measures[0].value') |" >> sonar_metrics.md
          echo "| Code Smells | $(curl -s https://sonarcloud.io/api/measures/component?component=YOUR_PROJECT_KEY&metricKeys=code_smells | jq '.component.measures[0].value') |" >> sonar_metrics.md
          echo "| Coverage | $(curl -s https://sonarcloud.io/api/measures/component?component=YOUR_PROJECT_KEY&metricKeys=coverage | jq '.component.measures[0].value')% |" >> sonar_metrics.md
          echo "| Bugs | $(curl -s https://sonarcloud.io/api/measures/component?component=YOUR_PROJECT_KEY&metricKeys=bugs | jq '.component.measures[0].value') |" >> sonar_metrics.md
          echo "| Duplications | $(curl -s https://sonarcloud.io/api/measures/component?component=YOUR_PROJECT_KEY&metricKeys=duplicated_lines_density | jq '.component.measures[0].value')% |" >> sonar_metrics.md

      - name: Update README.md with Sonar metrics
        run: |
          sed -i '/## ðŸ“Š SonarCloud Metrics/,$d' README.md
          cat sonar_metrics.md >> README.md

      - name: Commit and push Sonar metrics
        env:
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git remote set-url origin https://x-access-token:${PAT_TOKEN}@github.com/YOUR_USERNAME/YOUR_REPOSITORY.git
          git add README.md
          git commit -m "ðŸ“Š Update SonarCloud metrics in README.md" || echo "No changes to commit"
          git push origin HEAD:main || echo "No changes to push"

      - name: Add annotation for Sonar metrics
        if: success()
        run: |
          echo "::notice title=SonarCloud Report::Security Hotspots: $(curl -s https://sonarcloud.io/api/measures/component?component=YOUR_PROJECT_KEY&metricKeys=security_hotspots | jq '.component.measures[0].value'), Code Smells: $(curl -s https://sonarcloud.io/api/measures/component?component=YOUR_PROJECT_KEY&metricKeys=code_smells | jq '.component.measures[0].value'), Coverage: $(curl -s https://sonarcloud.io/api/measures/component?component=YOUR_PROJECT_KEY&metricKeys=coverage | jq '.component.measures[0].value')%"
